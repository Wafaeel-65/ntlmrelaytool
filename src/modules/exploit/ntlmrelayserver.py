from typing import Optional, Dict, List
import socket
import threading
import logging

class NTLMRelayServer:
    def __init__(self, listen_address='0.0.0.0', listen_port=8445):
        self.listen_address = listen_address
        self.listen_port = listen_port
        self.running = False
        self.server_socket: Optional[socket.socket] = None
        self.clients: List[socket.socket] = []
        self.lock = threading.Lock()
        self.logger = logging.getLogger(__name__)

    def start(self) -> None:
        """Start the NTLM Relay Server"""
        try:
            if self.server_socket:
                self.stop()
                
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            try:
                self.server_socket.bind((self.listen_address, self.listen_port))
                self.server_socket.listen(5)
            except Exception as e:
                self.logger.error(f"Failed to bind to {self.listen_address}:{self.listen_port}")
                self.stop()
                raise
                
            self.running = True
            self.logger.info(f"NTLM Relay Server started on {self.listen_address}:{self.listen_port}")
            self._accept_connections()
        except Exception as e:
            self.logger.error(f"Failed to start server: {e}")
            self.stop()
            raise

    def stop(self) -> None:
        """Stop the NTLM Relay Server"""
        self.running = False
        
        # Close all client connections
        with self.lock:
            for client in self.clients:
                try:
                    client.close()
                except:
                    pass
            self.clients.clear()
        
        # Close server socket
        if self.server_socket:
            self.server_socket.close()
            self.server_socket = None
            
        self.logger.info("NTLM Relay Server stopped")

    def _accept_connections(self) -> None:
        """Accept incoming connections"""
        while self.running:
            try:
                client, address = self.server_socket.accept()
                self.logger.info(f"New connection from {address[0]}:{address[1]}")
                
                with self.lock:
                    self.clients.append(client)
                
                # Start a new thread to handle the client
                client_thread = threading.Thread(
                    target=self._handle_client,
                    args=(client, address)
                )
                client_thread.daemon = True
                client_thread.start()
                
            except Exception as e:
                if self.running:
                    self.logger.error(f"Error accepting connection: {e}")

    def _handle_client(self, client: socket.socket, address: tuple) -> None:
        """Handle individual client connections"""
        try:
            while self.running:
                # Implement basic packet handling
                data = client.recv(4096)
                if not data:
                    break
                    
                # Look for NTLM auth packets
                if b'NTLMSSP' in data:
                    self.logger.info(f"Received NTLM authentication attempt from {address[0]}")
                
        except Exception as e:
            self.logger.error(f"Error handling client {address}: {e}")
        finally:
            with self.lock:
                if client in self.clients:
                    self.clients.remove(client)
            client.close()